"use strict";(self.webpackChunkmy_learnings=self.webpackChunkmy_learnings||[]).push([[724],{907:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"DSA/Stack","title":"Stacks and Queues","description":"Details about Stacks and Queues.","source":"@site/docs/DSA/Stack.md","sourceDirName":"DSA","slug":"/DSA/Stack","permalink":"/learndocs/DSA/Stack","draft":false,"unlisted":false,"editUrl":"https://github.com/stevenovak123/learndocs/tree/master/docs/DSA/Stack.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Stacks and Queues","description":"Details about Stacks and Queues."},"sidebar":"tutorialSidebar","previous":{"title":"Linked List","permalink":"/learndocs/DSA/LL"},"next":{"title":"Solved problems","permalink":"/learndocs/DSA/SolvedProblems"}}');var r=n(4848),i=n(8453);const a={sidebar_position:3,title:"Stacks and Queues",description:"Details about Stacks and Queues."},o=void 0,l={},c=[{value:"Stack",id:"stack",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"stack",children:"Stack"}),"\n",(0,r.jsx)(t.p,{children:"Follows a LIFO structure. Last In First Out.\r\nLast Element added to the stack is the first element to be removed."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Arrays can be used as a stack. provided LIFO is followed."}),"\n",(0,r.jsx)(t.li,{children:"Linked lists can be used for stacks as only the order matters and other information like index etc that array provides are not needed."}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:"title='Stack implementation'",children:"class Stack {\r\n  constructor() {\r\n    this.first = null;\r\n    this.last = null;\r\n    this.size = 0;\r\n  }\r\n}\r\nclass Node {\r\n  constructor(value) {\r\n    this.value = value;\r\n    this.next = null;\r\n  }\r\n  push(val) {\r\n    let newNode = new Node(val);\r\n    if (!this.first) {\r\n      this.first = newNode;\r\n      this.last = newNode;\r\n    } else {\r\n      let temp = this.first;\r\n      this.first = newNode;\r\n      this.first.next = temp;\r\n    }\r\n\r\n    return ++this.size;\r\n  }\r\n  pop() {\r\n    if (!this.first) {\r\n      return undefined;\r\n    }\r\n    let temp = this.first;\r\n    if (this.first === this.last) {\r\n      this.last = null;\r\n    }\r\n    this.first = this.first.next;\r\n    this.size--;\r\n    return temp.value;\r\n  }\r\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(6540);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);