"use strict";(self.webpackChunkmy_learnings=self.webpackChunkmy_learnings||[]).push([[623],{8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(6540);const s={},a=r.createContext(s);function i(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:t},e.children)}},8964:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"JavaScript/MapAndSet","title":"Maps and Sets","description":"Map","source":"@site/docs/JavaScript/MapAndSet.md","sourceDirName":"JavaScript","slug":"/JavaScript/MapAndSet","permalink":"/learndocs/JavaScript/MapAndSet","draft":false,"unlisted":false,"editUrl":"https://github.com/stevenovak123/learndocs/tree/master/docs/JavaScript/MapAndSet.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"Maps and Sets","Description":"Information on Sets and Maps in JavaScript"},"sidebar":"tutorialSidebar","previous":{"title":"Objects","permalink":"/learndocs/JavaScript/Objects"},"next":{"title":"Numbers and Dates","permalink":"/learndocs/JavaScript/NumbersAndDates"}}');var s=n(4848),a=n(8453);const i={sidebar_position:8,title:"Maps and Sets",Description:"Information on Sets and Maps in JavaScript"},o=void 0,l={},d=[{value:"Map",id:"map",level:2},{value:"Methods and Properties of Map",id:"methods-and-properties-of-map",level:2},{value:"Set",id:"set",level:2},{value:"Methods and Properties of Set",id:"methods-and-properties-of-set",level:2},{value:"Iteration over Map and Set",id:"iteration-over-map-and-set",level:2},{value:"using forEach method",id:"using-foreach-method",level:3}];function c(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"map",children:"Map"}),"\n",(0,s.jsx)(t.p,{children:"Map is a collection of keyed data items, just like an Object. But the main difference is that Map allows keys of any type. Map can also use objects as keys."}),"\n",(0,s.jsx)(t.p,{children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"let map = new Map();\r\nmap.set('1', 'str1'); // a string key\r\nmap.set(1, 'num1'); // a numeric key\r\nmap.set(true, 'bool1'); // a boolean key\r\n\r\nconsole.log(map.get(1)); // Output => 'num1'\r\n\r\nlet steve = { name: 'Steve' };\r\n\r\n// for every user, let's store their visits count\r\nlet visitsCountMap = new Map();\r\n\r\n// Steve is the key for the map\r\nvisitsCountMap.set(steve, 123);\r\n\r\nconsole.log(visitsCountMap.get(steve)); // 123\n"})}),"\n",(0,s.jsx)(t.h2,{id:"methods-and-properties-of-map",children:"Methods and Properties of Map"}),"\n",(0,s.jsx)(t.p,{children:"Methods and properties are:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"new Map() \u2013 creates the map."}),"\n",(0,s.jsx)(t.li,{children:"set(key, value) \u2013 stores the value by the key."}),"\n",(0,s.jsx)(t.li,{children:"get(key) \u2013 returns the value by the key, undefined if key doesn\u2019t exist in map."}),"\n",(0,s.jsx)(t.li,{children:"has(key) \u2013 returns true if the key exists, false otherwise."}),"\n",(0,s.jsx)(t.li,{children:"delete(key) \u2013 removes the element (the key/value pair) by the key."}),"\n",(0,s.jsx)(t.li,{children:"clear() \u2013 removes everything from the map."}),"\n",(0,s.jsx)(t.li,{children:"size \u2013 returns the current element count."}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"let recipeMap = new Map([\r\n  ['cucumber', 500],\r\n  ['tomatoes', 350],\r\n  ['onion', 50],\r\n]);\r\n\r\n// iterate over keys\r\nfor (let vegetable of recipeMap.keys()) {\r\n  console.log(vegetable); // cucumber, tomatoes, onion\r\n}\r\n\r\n// iterate over values (amounts)\r\nfor (let amount of recipeMap.values()) {\r\n  console.log(amount); // 500, 350, 50\r\n}\r\n\r\n// iterate over [key, value] entries\r\nfor (let entry of recipeMap) {\r\n  // the same as of recipeMap.entries()\r\n  console.log(entry); // cucumber,500 (and so on)\r\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"set",children:"Set"}),"\n",(0,s.jsx)(t.p,{children:"A Set is a special type collection \u2013 \u201cset of values\u201d (without keys), where each value may occur only once."}),"\n",(0,s.jsxs)(t.p,{children:["The main feature is that repeated calls of ",(0,s.jsx)(t.code,{children:"set.add(value)"})," with the same value don\u2019t do anything. That\u2019s the reason why each value appears in a Set only once."]}),"\n",(0,s.jsx)(t.h2,{id:"methods-and-properties-of-set",children:"Methods and Properties of Set"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"new Set([iterable]) \u2013 creates the set, and if an iterable object is provided (usually an array), copies values from it into the set."}),"\n",(0,s.jsx)(t.li,{children:"set.add(value) \u2013 adds a value, returns the set itself."}),"\n",(0,s.jsx)(t.li,{children:"set.delete(value) \u2013 removes the value, returns true if value existed at the moment of the call, otherwise false."}),"\n",(0,s.jsx)(t.li,{children:"set.has(value) \u2013 returns true if the value exists in the set, otherwise false."}),"\n",(0,s.jsx)(t.li,{children:"set.clear() \u2013 removes everything from the set."}),"\n",(0,s.jsx)(t.li,{children:"set.size \u2013 is the elements count."}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"let set = new Set();\r\n\r\nlet steve = { name: 'Steve' };\r\nlet pete = { name: 'Pete' };\r\nlet mary = { name: 'Mary' };\r\n\r\n// visits, some users come multiple times\r\nset.add(steve);\r\nset.add(pete);\r\nset.add(mary);\r\nset.add(steve);\r\nset.add(mary);\r\n\r\n// set keeps only unique values\r\nconsole.log(set.size); // 3\r\n\r\nfor (let user of set) {\r\n  console.log(user.name); // Steve Pete Mary\r\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"iteration-over-map-and-set",children:"Iteration over Map and Set"}),"\n",(0,s.jsx)(t.p,{children:"For looping over a map, there are 3 methods:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"keys() \u2013 returns an iterable for keys,"}),"\n",(0,s.jsx)(t.li,{children:"map.values() \u2013 returns an iterable for values,"}),"\n",(0,s.jsx)(t.li,{children:"map.entries() \u2013 returns an iterable for entries [key, value], it\u2019s used by default in for..of."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"using-foreach-method",children:"using forEach method"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Same as the forEach method present in arrays."}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.strong,{children:"Will always loop over the entire datastructure."})}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);