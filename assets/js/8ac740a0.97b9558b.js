"use strict";(self.webpackChunkmy_learnings=self.webpackChunkmy_learnings||[]).push([[35],{7519:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"DSA/Searching/Naive","title":"Naive String Search","description":"Naive String Search, logic and code","source":"@site/docs/DSA/Searching/Naive.md","sourceDirName":"DSA/Searching","slug":"/DSA/Searching/Naive","permalink":"/learndocs/DSA/Searching/Naive","draft":false,"unlisted":false,"editUrl":"https://github.com/stevenovak123/learndocs/tree/master/docs/DSA/Searching/Naive.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Naive String Search","description":"Naive String Search, logic and code"},"sidebar":"tutorialSidebar","previous":{"title":"Binary Search","permalink":"/learndocs/DSA/Searching/Binary"},"next":{"title":"Built In JavaScript Sorting","permalink":"/learndocs/DSA/Sorting/BuiltIn"}}');var r=t(4848),o=t(8453);const s={sidebar_position:3,title:"Naive String Search",description:"Naive String Search, logic and code"},a=void 0,c={},l=[{value:"Pseudocode",id:"pseudocode",level:2},{value:"Time Complexity",id:"time-complexity",level:2}];function h(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Naive string search is a simple search. The logic is try to match strings with each other by iterating the smaller string over the bigger."}),"\n",(0,r.jsx)(n.h2,{id:"pseudocode",children:"Pseudocode"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Loop over the longer string."}),"\n",(0,r.jsx)(n.li,{children:"Loop over the shorter string."}),"\n",(0,r.jsx)(n.li,{children:"if the characters dont match, break out of the inner loop."}),"\n",(0,r.jsx)(n.li,{children:"if the characters match, continue."}),"\n",(0,r.jsx)(n.li,{children:"if you complete the innter loop and find a match, increment the count of matches."}),"\n",(0,r.jsx)(n.li,{children:"Return the count."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Best Case is O(1)"}),"\n",(0,r.jsx)(n.li,{children:"Average Case and Worst Case is O(N), where N is the size of the array"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:"title='Naive string search'",children:"function naiveSearch(longString, shortString) {\r\n  let count = 0;\r\n  for (let i = 0; i < longString.length; i++) {\r\n    for (let j = 0; j < shortString.length; j++) {\r\n      if (shortString[j] !== longString[i + j]) {\r\n        break;\r\n      }\r\n      if (j === shortString.length - 1) {\r\n        count++;\r\n      }\r\n    }\r\n  }\r\n  return count;\r\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);