"use strict";(self.webpackChunkmy_learnings=self.webpackChunkmy_learnings||[]).push([[336],{180:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"DSA/Searching/Binary","title":"Binary Search","description":"Binary Search, logic and code","source":"@site/docs/DSA/Searching/Binary.md","sourceDirName":"DSA/Searching","slug":"/DSA/Searching/Binary","permalink":"/learndocs/DSA/Searching/Binary","draft":false,"unlisted":false,"editUrl":"https://github.com/stevenovak123/learndocs/tree/master/docs/DSA/Searching/Binary.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Binary Search","description":"Binary Search, logic and code"},"sidebar":"tutorialSidebar","previous":{"title":"Linear Search","permalink":"/learndocs/DSA/Searching/Linear"},"next":{"title":"Naive String Search","permalink":"/learndocs/DSA/Searching/Naive"}}');var t=r(4848),a=r(8453);const l={sidebar_position:2,title:"Binary Search",description:"Binary Search, logic and code"},s=void 0,d={},o=[{value:"Pseudocode",id:"pseudocode",level:2},{value:"Time Complexity",id:"time-complexity",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Binary search is a much faster form of search. Rather than eliminating one element at a time, we eliminate half of the remaining elements at once. ",(0,t.jsx)(n.strong,{children:"Works only on sorted arrays"})]}),"\n",(0,t.jsx)(n.h2,{id:"pseudocode",children:"Pseudocode"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Accept an array and the item to search."}),"\n",(0,t.jsxs)(n.li,{children:["initialize ",(0,t.jsx)(n.code,{children:"start"})," (0) and ",(0,t.jsx)(n.code,{children:"end"})," as ",(0,t.jsx)(n.code,{children:"(array.length-1)"}),". Can be called left and right as well"]}),"\n",(0,t.jsxs)(n.li,{children:["While the ",(0,t.jsx)(n.code,{children:"start is less than end AND middle is not the item."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Find the",(0,t.jsx)(n.code,{children:" midpoint"})," of the array. Can use this formula. ",(0,t.jsx)(n.code,{children:"(start + (end-start))/2"})]}),"\n",(0,t.jsxs)(n.li,{children:["Check if the",(0,t.jsx)(n.code,{children:" item is before or after"})," the midpoint."]}),"\n",(0,t.jsxs)(n.li,{children:["If ",(0,t.jsx)(n.code,{children:"item is before midpoint"}),", then update ",(0,t.jsx)(n.code,{children:"end to midpoint -1."})]}),"\n",(0,t.jsxs)(n.li,{children:["else if ",(0,t.jsx)(n.code,{children:"item is after midpoint"}),", update ",(0,t.jsx)(n.code,{children:"start to midpoint +1"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"return middle if value is found."}),"\n",(0,t.jsx)(n.li,{children:"If value is not find return -1."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Best Case is O(1)."}),"\n",(0,t.jsx)(n.li,{children:"Average Case and Worst Case is O(log n), where n is the size of the array"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:"title='Binary Search'",children:"function binarySearch(arr, value) {\r\n  let left = 0;\r\n  let right = arr.length - 1;\r\n  let middle = Math.floor((left + right) / 2); //Math.floor(left +(right-left)/2)\r\n\r\n  while (arr[middle] !== value && left <= right) {\r\n    if (value < arr[middle]) {\r\n      right = middle - 1;\r\n    } else {\r\n      left = middle + 1;\r\n    }\r\n    middle = Math.floor((left + right) / 2);\r\n    // Optional middle= Math.floor(left +(right-left)/2)\r\n  }\r\n\r\n  return arr[middle] === value ? middle : -1;\r\n \r\n}\r\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>s});var i=r(6540);const t={},a=i.createContext(t);function l(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);