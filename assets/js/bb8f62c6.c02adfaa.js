"use strict";(self.webpackChunkmy_learnings=self.webpackChunkmy_learnings||[]).push([[210],{8101:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"JavaScript/Theory","title":"Theoretical JS","description":"Introduction to JavaScript","source":"@site/docs/JavaScript/Theory.md","sourceDirName":"JavaScript","slug":"/JavaScript/Theory","permalink":"/learndocs/JavaScript/Theory","draft":false,"unlisted":false,"editUrl":"https://github.com/stevenovak123/learndocs/tree/master/docs/JavaScript/Theory.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Theoretical JS","description":"Introduction to JavaScript"},"sidebar":"tutorialSidebar","previous":{"title":"Basics of JavaScript","permalink":"/learndocs/JavaScript/Basics"},"next":{"title":"Strings and Template Literals","permalink":"/learndocs/JavaScript/Strings"}}');var s=i(4848),l=i(8453);const c={sidebar_position:3,title:"Theoretical JS",description:"Introduction to JavaScript"},r="Theory of JavaScript",o={},a=[{value:"JavaScript Engine",id:"javascript-engine",level:2},{value:"Just-in-time Compilation process",id:"just-in-time-compilation-process",level:2},{value:"JavaScript Runtime",id:"javascript-runtime",level:2},{value:"Execution Context &amp; Call Stack",id:"execution-context--call-stack",level:2},{value:"Contents of execution context",id:"contents-of-execution-context",level:3},{value:"Scope &amp; Scope chain",id:"scope--scope-chain",level:3},{value:"Variable Environment",id:"variable-environment",level:3},{value:"<em>this</em> keyword",id:"this-keyword",level:3},{value:"this keyword &amp; its behaviour with different methods",id:"this-keyword--its-behaviour-with-different-methods",level:4},{value:"Call Stack",id:"call-stack",level:2}];function d(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"theory-of-javascript",children:"Theory of JavaScript"})}),"\n",(0,s.jsx)(n.h2,{id:"javascript-engine",children:"JavaScript Engine"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"JavaScript engine is a program that executes JavaScript code."}),"\n",(0,s.jsxs)(n.li,{children:["One of the well known JS engines are the Google' V8 engine.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Powers Chrome and NodeJs."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Every engine contains a ",(0,s.jsx)(n.strong,{children:"Call Stack"})," and ",(0,s.jsx)(n.strong,{children:"Heap"}),".","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The Call stack is where the code is executed."}),"\n",(0,s.jsx)(n.li,{children:"Contains the execution context."}),"\n",(0,s.jsx)(n.li,{children:"Heap is where all the objects are stored in memory."}),"\n",(0,s.jsx)(n.li,{children:"It is a unstructured memory pool."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Js is a Just-in-time compiled language.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"that means the code in compiled and instantly interpreted."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"just-in-time-compilation-process",children:"Just-in-time Compilation process"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["When the code enters the engine, it is first parsed.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["It is parsed into ",(0,s.jsx)(n.strong,{children:"Abstract syntax tree"})," (AST).","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"Takes all the values that make sense to the language and stored in a structured manner"}),"-"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The AST is then compiled into machine code which is instanly executed.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"This execution happens in the Call stack of the engine."}),"\n",(0,s.jsx)(n.li,{children:"This program is optimized again and again, the unoptimized code is replaced or discarded."}),"\n",(0,s.jsx)(n.li,{children:"This makes JS fast. Different engines do this different ways of optimization."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"javascript-runtime",children:"JavaScript Runtime"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["JavaScript runtime contains of the JS engine and Browser. (most common)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"JS engine ,WEB API's, Callback Queues are components of the run time."}),"\n",(0,s.jsx)(n.li,{children:"Web API's provide functionality to the engine and are accessible on the window object."}),"\n",(0,s.jsxs)(n.li,{children:["Callback queues are a datastructure that contains all callback functions ready to be executed.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Callback functions are called when the callstack is empty. This happens due to the eventloop."}),"\n",(0,s.jsx)(n.li,{children:"This is how the non-blocking concurrency model."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"NodeJs is similar but instead of Web API's there are C++ bindings and thread pools."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"execution-context--call-stack",children:"Execution Context & Call Stack"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"After compilation. A Global execution context is created for the top level code. Top level code is the code that is called. (Not function definitions)"}),"\n",(0,s.jsx)(n.li,{children:"Execution context is an abstract concept, an environment where JS is executed."}),"\n",(0,s.jsx)(n.li,{children:"Only one global execution context is created by default."}),"\n",(0,s.jsx)(n.li,{children:"Once the top level code is executed, each function call gets its own execution context that is stored within the global context."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"contents-of-execution-context",children:"Contents of execution context"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Scope Chain : How to organise the variables."}),"\n",(0,s.jsx)(n.li,{children:"Variable Environment : Contains all variables, functions and argument objects."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"this"})," keyword."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["Arrow functions ",(0,s.jsx)(n.strong,{children:"don't"})," have their own argument objects and ",(0,s.jsx)(n.em,{children:"this"})," keyword. However they can use the closest regular functions ",(0,s.jsx)(n.em,{children:"argument object"})," and ",(0,s.jsx)(n.em,{children:"this"})," keyword."]})}),"\n",(0,s.jsx)(n.h3,{id:"scope--scope-chain",children:"Scope & Scope chain"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Scope is the space or environment where a certain variable is declared.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Can be ",(0,s.jsx)(n.strong,{children:"global"}),",",(0,s.jsx)(n.strong,{children:"function"})," and ",(0,s.jsx)(n.strong,{children:"block"})," scope."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Scoping controls how the variables of the program are organised and accessed.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["JavaScript is ",(0,s.jsx)(n.strong,{children:"Lexically"})," scoped."]}),"\n",(0,s.jsx)(n.li,{children:"This means that the scoping is determined by the placement of functions and blocks in the code."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Global scope is for the top level code. (outside any function or block)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Accessible everywhere."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Function scope is for accessibility inside the function.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Also called local scope."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Block scope is accessible inside the block. (ES6 feature)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["only apply to ",(0,s.jsx)(n.code,{children:"let"})," and ",(0,s.jsx)(n.code,{children:"const"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"functions are block scoped when used with strict mode."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Scope chain is the ability to look up to the parent scope for missing variables.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Scope Chain means that one variable has a scope (it may be global or local/function or block scope) is used by another variable or function having another scope (may be global or local/function or block scope)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"variable-environment",children:"Variable Environment"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Variables are created through a mechanism called ",(0,s.jsx)(n.strong,{children:"Hoisting"}),".","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Hoisting is making available types of variables accessible in the code before they are actually declared."}),"\n",(0,s.jsxs)(n.li,{children:["The code is scanned for variable declarations and created in the ",(0,s.jsx)(n.em,{children:"variable environment"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"It does not work the same for all."}),"\n"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{children:"Hoisted"}),(0,s.jsx)(n.th,{children:"Initial Value"}),(0,s.jsx)(n.th,{children:"Scope"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"function"})," Declaration"]}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsx)(n.td,{children:"Actual Function"}),(0,s.jsx)(n.td,{children:"Block"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"var"})," variables"]}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsx)(n.td,{children:"Undefined"}),(0,s.jsx)(n.td,{children:"Function"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"let"})," & ",(0,s.jsx)(n.code,{children:"const"})]}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsx)(n.td,{children:"Uninitalized ,TDZ"}),(0,s.jsx)(n.td,{children:"Block"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"function"})," expression & arrow functions"]}),(0,s.jsx)(n.td,{children:"depends if used with var or let / const"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]})]})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"TDZ"})})," is Temporal dead zone. It is the state where variables are un-reachable.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"They are in scope but they aren't declared."}),"\n",(0,s.jsx)(n.li,{children:"Makes it easier to avoid and catch errors."}),"\n",(0,s.jsx)(n.li,{children:"Makes const variables work."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const myName = 'Steve';\r\nif (myName === 'Steve') {\r\n  // highlight-start\r\n  console.log(`Steve is a ${job}`);\r\n  const age = 2023 - 2001;\r\n  console.log(age);\r\n  //highlight-end\r\n  const job = 'programmer'; //highlighted area is the TDZ for job\r\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"this-keyword",children:[(0,s.jsx)(n.em,{children:"this"})," keyword"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["It is a special variable created for every execution context.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"It takes the value(points to) of the owner of the function in which it exists."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Its value is not static."}),"\n",(0,s.jsx)(n.li,{children:"Value depends on how the function is called and value is assigned when the function is called."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"this-keyword--its-behaviour-with-different-methods",children:"this keyword & its behaviour with different methods"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsxs)(n.th,{children:["value of ",(0,s.jsx)(n.em,{children:"this"})]})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Method"}),(0,s.jsx)(n.td,{children:"Object calling the method"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Simple function"}),(0,s.jsx)(n.td,{children:"undefined"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Arrow functions"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"this"})," of surrounding function (Lexical this)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Event listener"}),(0,s.jsx)(n.td,{children:"DOM element that the handler is attached to"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"call-stack",children:"Call Stack"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"This is the place where all the execution contexts get stacked on top of each other."}),"\n",(0,s.jsx)(n.li,{children:"This keeps track of where the execution has reached."}),"\n",(0,s.jsx)(n.li,{children:"Once the code is executed and the function returns its contents. It is popped out of the call stack."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>r});var t=i(6540);const s={},l=t.createContext(s);function c(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);