"use strict";(self.webpackChunkmy_learnings=self.webpackChunkmy_learnings||[]).push([[654],{6277:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"JavaScript/Strings","title":"Strings and Template Literals","description":"Strings","source":"@site/docs/JavaScript/Strings.md","sourceDirName":"JavaScript","slug":"/JavaScript/Strings","permalink":"/learndocs/JavaScript/Strings","draft":false,"unlisted":false,"editUrl":"https://github.com/stevenovak123/learndocs/tree/master/docs/JavaScript/Strings.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"Title":"Strings in JS","Description":"Information on Strings and Template Literals in JS"},"sidebar":"tutorialSidebar","previous":{"title":"Theoretical JS","permalink":"/learndocs/JavaScript/Theory"},"next":{"title":"Functions","permalink":"/learndocs/JavaScript/Functions"}}');var r=t(4848),a=t(8453);const l={sidebar_position:4,Title:"Strings in JS",Description:"Information on Strings and Template Literals in JS"},i="Strings and Template Literals",c={},o=[{value:"Strings",id:"strings",level:2},{value:"Template Literals",id:"template-literals",level:2},{value:"String Methods",id:"string-methods",level:2},{value:"length",id:"length",level:3},{value:"slice(start, end)",id:"slicestart-end",level:3},{value:"substring(start, end)",id:"substringstart-end",level:3},{value:"substr(start, length)",id:"substrstart-length",level:3},{value:"replace()",id:"replace",level:3},{value:"replaceAll()",id:"replaceall",level:3},{value:"toUpperCase() &amp; toLowerCase()",id:"touppercase--tolowercase",level:3},{value:"indexOf()",id:"indexof",level:3},{value:"at()",id:"at",level:3}];function d(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"strings-and-template-literals",children:"Strings and Template Literals"})}),"\n",(0,r.jsx)(n.h2,{id:"strings",children:"Strings"}),"\n",(0,r.jsx)(n.p,{children:"A JavaScript string is zero or more characters written inside quotes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'let text = "Steve Dsouza";\n'})}),"\n",(0,r.jsx)(n.p,{children:"You can use single or double quotes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let carName1 = \"Ferrari\";\r\n// prettier-ignore\r\nlet carName2 = 'Toyota';\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"the comment prettier-ignore is for the formatter to abide by my IDE rules"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Quotes can be used inside a string, as long as they don't match the quotes surrounding the string."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'let answer1 = "It\'s alright";\r\nlet answer2 = "He is called \'Johnny\'";\r\nlet answer3 = \'He is called "Johnny"\';\n'})}),"\n",(0,r.jsx)(n.p,{children:"String characters can be accessed like accessing an index of an array"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'let airplane = "Airbus 380";\r\nconsole.log(airplane[2]); // output=> r\n'})}),"\n",(0,r.jsx)(n.h2,{id:"template-literals",children:"Template Literals"}),"\n",(0,r.jsxs)(n.p,{children:["Template is an easier way to write strings and insert variables in them. This came with ES6. They make use of back-tics (",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"``"})}),")."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let text = `Hello World !`;\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Example using ",(0,r.jsx)(n.code,{children:"+"})," to concat strings"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const name = "Steve";\r\nconst job = "programmer";\r\nconst age = 22;\r\nconst sentenceWithString =\r\n  name + " is " + "a " + job + " and is " + age + " years old.";\r\nconsole.log(sentenceWithString);\r\n//output=> Steve is a programmer and is 22 years old\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Example with Template literals"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const name = "Steve";\r\nconst job = "programmer";\r\nconst age = 22;\r\nconst sentenceWithLiteral = `${name} is a ${job} and is ${age} years old `;\r\nconsole.log(sentenceWithLiteral);\r\n//output=> Steve is a programmer and is 22 years old\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The use of ",(0,r.jsx)(n.code,{children:"${}"})," to enter values is called interpolation. Interpolation is the automatic replacing of variables with real values."]}),"\n",(0,r.jsx)(n.h2,{id:"string-methods",children:"String Methods"}),"\n",(0,r.jsx)(n.p,{children:"A few String methods are as follows."}),"\n",(0,r.jsx)(n.h3,{id:"length",children:"length"}),"\n",(0,r.jsx)(n.p,{children:"returns the length of the string."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'let text = "STEVE";\r\nlet length = text.length;\r\nconsole.log(length); // output => 5\n'})}),"\n",(0,r.jsx)(n.h3,{id:"slicestart-end",children:"slice(start, end)"}),"\n",(0,r.jsx)(n.p,{children:"Returns the extracted part as a new string (end is not included)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'let text = "Mango, Banana, Pear";\r\nlet part = text.slice(14, 19);\r\nconsole.log(part); // output => Pear\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If the second param is omitted, the method will slice till the end of string."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'let text = "Mango, Banana, Pear";\r\nlet part = text.slice(6);\r\nconsole.log(part); // output => Banana, Pear\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If the parameter is negative then, the positions are counted from the end."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'let text = "Mango, Banana, Pear";\r\nlet part = text.slice(-12, -6);\r\nconsole.log(part); // output => Banana\n'})}),"\n",(0,r.jsx)(n.h3,{id:"substringstart-end",children:"substring(start, end)"}),"\n",(0,r.jsxs)(n.p,{children:["It is similar to",(0,r.jsx)(n.code,{children:"slice()"}),"; the difference being the start and end value less than 0 are treated as 0."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If you omit the second parameter, .",(0,r.jsx)(n.code,{children:"substring()"})," will slice out the rest of the string."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"substrstart-length",children:"substr(start, length)"}),"\n",(0,r.jsxs)(n.p,{children:["It is similar to ",(0,r.jsx)(n.code,{children:"slice()"}),"; The difference is that the second parameter specifies the length of the extracted part."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'let text = "Mango, Banana, Pear";\r\nlet part = text.slice(7, 6); //output => Banana\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If you omit the second parameter, .",(0,r.jsx)(n.code,{children:"substr()"})," will slice out the rest of the string."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'let text = "Mango, Banana, Pear";\r\nlet part = text.slice(14);\r\nconsole.log(part); // output => Pear\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If the parameter is negative then, the positions are counted from the end."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'let text = "Mango, Banana, Pear";\r\nlet part = text.slice(-12);\r\nconsole.log(part); // output => Banana, Pear\n'})}),"\n",(0,r.jsx)(n.h3,{id:"replace",children:"replace()"}),"\n",(0,r.jsx)(n.p,{children:"Replaces a specified value with another value in a string. It returns a new string"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'let text = "Please visit the office";\r\nlet newText = text.replace("the", "Deloitte");\r\nconsole.log(newText); // output=>"Please visit Deloitte office"\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"It does not change the string it is called on."}),"\n",(0,r.jsx)(n.li,{children:"It replaces only the first match."}),"\n",(0,r.jsx)(n.li,{children:"It is case sensitive."}),"\n",(0,r.jsx)(n.li,{children:"Can use regular expressions (Written without quotes)."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"replaceall",children:"replaceAll()"}),"\n",(0,r.jsxs)(n.p,{children:["Replaces all the strings to be replaced. Similar to ",(0,r.jsx)(n.code,{children:"replace()"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'let text = "I love cats. Cats are very easy to love. Cats are very popular.";\r\nreplacedText = text.replaceAll("Cats", "Dogs");\r\nconsole.log(replacedText);\r\n//output =>I love dogs. Dogs are very easy to love. Dogs are very popular.\n'})}),"\n",(0,r.jsx)(n.h3,{id:"touppercase--tolowercase",children:"toUpperCase() & toLowerCase()"}),"\n",(0,r.jsx)(n.p,{children:"Converts strings to upper case and lower case ."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'let text = "Hello world";\r\nconsole.log(text.toUpperCase()); //output=> HELLO WORLD\r\nconsole.log(text.toLowerCase()); //output=> hello world\n'})}),"\n",(0,r.jsx)(n.h3,{id:"indexof",children:"indexOf()"}),"\n",(0,r.jsx)(n.p,{children:"Returns the index of the argument passed. Will return -1 if nothing is found."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'let airline = "TAP Air Portugal";\r\nconsole.log(name.indexOf("r")); // output=> 6\r\nconsole.log(name.lastIndexOf("r")); // output=> 10\r\nconsole.log(name.index("Portugal")); //output => 8\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"It returns the first match of the index"}),"\n",(0,r.jsx)(n.li,{children:"It is case sensitive."}),"\n",(0,r.jsx)(n.li,{children:"Can be used to find whole words."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"at",children:"at()"}),"\n",(0,r.jsx)(n.p,{children:"Returns the value at the argument passed."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'let airline = "TAP Air Portugal";\r\nconsole.log(airline.at(0)) // output =>T\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var s=t(6540);const r={},a=s.createContext(r);function l(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);