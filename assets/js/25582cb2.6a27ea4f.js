"use strict";(self.webpackChunkmy_learnings=self.webpackChunkmy_learnings||[]).push([[786],{8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},9924:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"React/internals","title":"Internals of React","description":"Internal Working of React","source":"@site/docs/React/internals.md","sourceDirName":"React","slug":"/React/internals","permalink":"/learndocs/React/internals","draft":false,"unlisted":false,"editUrl":"https://github.com/stevenovak123/learndocs/tree/master/docs/React/internals.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Internals of React","description":"Internal Working of React"},"sidebar":"tutorialSidebar","previous":{"title":"Components","permalink":"/learndocs/React/components"}}');var s=t(4848),r=t(8453);const l={sidebar_position:5,title:"Internals of React",description:"Internal Working of React"},o=void 0,a={},c=[{value:"Components internally.",id:"components-internally",level:2},{value:"Virtual DOM.",id:"virtual-dom",level:3},{value:"Reconciliation.",id:"reconciliation",level:3},{value:"Diffing.",id:"diffing",level:3},{value:"Rendering.",id:"rendering",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"components-internally",children:"Components internally."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Components are description pieces of UI, with these components, react creates component instances."}),"\n",(0,s.jsx)(n.li,{children:"Component instances are physical instances of the code. It has its own state, props and lifecycle."}),"\n",(0,s.jsxs)(n.li,{children:["The JSX is then converted to ",(0,s.jsx)(n.code,{children:"React.createElement()"})," function calls."]}),"\n",(0,s.jsxs)(n.li,{children:["React element is a large immutable object.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"It contains all the necessary information to create DOM elements."}),"\n",(0,s.jsx)(n.li,{children:"They are converted to DOM elements to be displayed into screen."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"virtual-dom",children:"Virtual DOM."}),"\n",(0,s.jsx)(n.p,{children:"Virutal DOM is tree of all React elements created from all instances in the component tree.\r\nIt is fast and cheap to create multiple trees."}),"\n",(0,s.jsx)(n.h3,{id:"reconciliation",children:"Reconciliation."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Reconciliation is the process of deciding which DOM elements actually need to be inserted, deleted or updated, in order to reflect the latest state changes."}),"\n",(0,s.jsx)(n.li,{children:"It is done by Fiber. Fiber is the react engine of sorts."}),"\n",(0,s.jsx)(n.li,{children:"Fiber tree is an internal tree that has a fiber for each component instance and DOM element."}),"\n",(0,s.jsx)(n.li,{children:"They are not re-created on every render."}),"\n",(0,s.jsx)(n.li,{children:"It can work async, so it can split, prioritze, pause, reuse, or discard."}),"\n",(0,s.jsx)(n.li,{children:"Due to this concurrent features like Suspense or transitions can be used (React 18 onwards)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"diffing",children:"Diffing."}),"\n",(0,s.jsx)(n.p,{children:"Diffing is comparing elements of two different renders based on the position in the trees.\r\nDiffing is based on 2 assumptions."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Two elements of different types will produce different trees.","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Same position , different element."}),"\n",(0,s.jsx)(n.li,{children:"Same position, same element."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Elements with a stable key prop stay the same across renders."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"rendering",children:"Rendering."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When a render is triggered, React will call component functions and figures how DOM should be updated."}),"\n",(0,s.jsx)(n.li,{children:"Rendering here does not produce any visual changes, it figures interally what has changed."}),"\n",(0,s.jsx)(n.li,{children:"In the Commit phase is where the changes are written on to the DOM. The browser then displays the changes to the user."}),"\n",(0,s.jsxs)(n.li,{children:["There are only two ways to render a trigger.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Initial Render of app."}),"\n",(0,s.jsx)(n.li,{children:"State is updated in one or more components."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Render happens for the entire application. It is scheduled and not immediately trigger."}),"\n",(0,s.jsx)(n.li,{children:"Multiple setStates are batched together."}),"\n",(0,s.jsx)(n.li,{children:"Then a new virtual DOM is created and reconciled with the fiber tree and is updated. Fiber tree is also known as Reconciler."}),"\n",(0,s.jsx)(n.li,{children:"This generates a List of DOM updates and moves it to Commit."}),"\n",(0,s.jsx)(n.li,{children:"Commit Phase is where React finally writes to the DOM. It is synchronous to ensure no broken UI is shown."}),"\n",(0,s.jsx)(n.li,{children:"Once completed, the work in progress fibre tree becomes the current tree."}),"\n",(0,s.jsx)(n.li,{children:"Browser then updates the user screen."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);