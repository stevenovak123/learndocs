"use strict";(self.webpackChunkmy_learnings=self.webpackChunkmy_learnings||[]).push([[319],{63:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"React/state","title":"State","description":"State in React","source":"@site/docs/React/state.md","sourceDirName":"React","slug":"/React/state","permalink":"/learndocs/React/state","draft":false,"unlisted":false,"editUrl":"https://github.com/stevenovak123/learndocs/tree/master/docs/React/state.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"State","description":"State in React"},"sidebar":"tutorialSidebar","previous":{"title":"Core Concepts","permalink":"/learndocs/React/concepts"},"next":{"title":"Components","permalink":"/learndocs/React/components"}}');var r=n(4848),i=n(8453);const a={sidebar_position:3,title:"State",description:"State in React"},o="State",c={},l=[{value:"What is State?",id:"what-is-state",level:2},{value:"Types of State",id:"types-of-state",level:2},{value:"Tips on deciding if state is needed or not",id:"tips-on-deciding-if-state-is-needed-or-not",level:3},{value:"Derived State",id:"derived-state",level:3}];function d(e){const t={admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"state",children:"State"})}),"\n",(0,r.jsx)(t.h2,{id:"what-is-state",children:"What is State?"}),"\n",(0,r.jsxs)(t.p,{children:["State is data that a component can hold over time necessary for information that it needs to remember throughout the app lifecycle. ",(0,r.jsx)(t.strong,{children:"It is the memory of the component."}),"\r\nUpdating a piece of state will cause a trigger to re-render the component.\r\nThis allows developers to update the component view, persist local variables between renders."]}),"\n",(0,r.jsx)(t.p,{children:"Example of state"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",metastring:"live",live:!0,children:"function App() {\r\n  const [data, setData] = useState(0);\r\n  const handleIncrement = () => {\r\n    setData((prevCount) => prevCount + 1);\r\n  };\r\n  const handleDecrement = () => {\r\n    setData((prevCount) => prevCount - 1);\r\n  };\r\n  return (\r\n    <>\r\n      <p>value of state: {data} </p>\r\n      <button onClick={handleIncrement}>Increment</button>\r\n      <button onClick={handleDecrement}>Decrement</button>\r\n    </>\r\n  );\r\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["We are using ",(0,r.jsx)(t.em,{children:"setState"}),", like ",(0,r.jsx)(t.em,{children:"setCount(prevCount => prevCount + 1)"}),", ensures that you're always working with the latest state, no matter when the update is actually applied by React.",(0,r.jsx)(t.br,{}),"\n","While ",(0,r.jsx)(t.em,{children:"setCount(count + 1)"})," might work in simple cases, using ",(0,r.jsx)(t.em,{children:"setCount(prevCount => prevCount + 1)"})," is safer and more reliable, especially in more complex scenarios or in cases where you're dependent on the current state."]}),"\n",(0,r.jsx)(t.h2,{id:"types-of-state",children:"Types of State"}),"\n",(0,r.jsxs)(t.p,{children:["There are two types of state, ",(0,r.jsx)(t.strong,{children:"local"})," & ",(0,r.jsx)(t.strong,{children:"global"}),"."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Local state might be needed by one or few components.","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"It is defined in a component and only that component and child components have access to it."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["Global state is might be needed for several components","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Shared state that is accessible to every component in the entire application."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"tips-on-deciding-if-state-is-needed-or-not",children:"Tips on deciding if state is needed or not"}),"\n",(0,r.jsx)(t.p,{children:"while building applications, new state should be created after answering a few preliminary questions such as,"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Is there a need to store the data?"}),"\n",(0,r.jsx)(t.li,{children:"Will the data change at some point?"}),"\n",(0,r.jsx)(t.li,{children:"Can it be computed or derived from the exisiting props or state?"}),"\n",(0,r.jsxs)(t.li,{children:["Should it re-render component? ",(0,r.jsx)(t.strong,{children:"if no, use refs"})]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Questions like where to place the state can be answered using the below questions"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Is it only used by the current component?"}),"\n",(0,r.jsx)(t.li,{children:"Will it be used by the Child component?"}),"\n",(0,r.jsx)(t.li,{children:"Used by one or few sibling components?"}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"derived-state",children:"Derived State"}),"\n",(0,r.jsx)(t.p,{children:"State that is computed from an existing piece of state or from props. Below is an example of derived state."}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsx)(t.p,{children:"if cart items and total price were given its individual state then that would be tough to maintain and would cause re-renders everytime it changes."})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:"live title='example of derived state'",live:!0,children:"function App() {\r\n  const [cart, setCart] = useState([\r\n    { name: 'Js', price: 10 },\r\n    { name: 'Java', price: 15 },\r\n  ]);\r\n  const numItems = cart.length;\r\n  const totalPrice = cart.reduce((acc, current) => acc + current.price, 0);\r\n  return (\r\n    <>\r\n      <p>Number of items in cart {numItems}</p>\r\n      <p>Total Price {totalPrice}</p>\r\n    </>\r\n  );\r\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(6540);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);