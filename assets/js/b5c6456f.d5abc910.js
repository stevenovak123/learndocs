"use strict";(self.webpackChunkmy_learnings=self.webpackChunkmy_learnings||[]).push([[354],{2644:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"JavaScript/Basics","title":"Basics of JavaScript","description":"Variables and Values","source":"@site/docs/JavaScript/Basics.md","sourceDirName":"JavaScript","slug":"/JavaScript/Basics","permalink":"/learndocs/JavaScript/Basics","draft":false,"unlisted":false,"editUrl":"https://github.com/stevenovak123/learndocs/tree/master/docs/JavaScript/Basics.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"Title":"Basics of JS","Description":"Information on Primitives"},"sidebar":"tutorialSidebar","previous":{"title":"Introduction to JS","permalink":"/learndocs/JavaScript/intro"},"next":{"title":"Theoretical JS","permalink":"/learndocs/JavaScript/Theory"}}');var t=s(4848),i=s(8453);const l={sidebar_position:2,Title:"Basics of JS",Description:"Information on Primitives"},d="Basics of JavaScript",a={},c=[{value:"Variables and Values",id:"variables-and-values",level:2},{value:"Data types of JavaScript",id:"data-types-of-javascript",level:2},{value:"Variable Declaration",id:"variable-declaration",level:2},{value:"Operators",id:"operators",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:3},{value:"Assignment Operators",id:"assignment-operators",level:3},{value:"Comparison Operators",id:"comparison-operators",level:3},{value:"Logical Operators",id:"logical-operators",level:3},{value:"Type Operators",id:"type-operators",level:3}];function o(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"basics-of-javascript",children:"Basics of JavaScript"})}),"\n",(0,t.jsx)(r.h2,{id:"variables-and-values",children:"Variables and Values"}),"\n",(0,t.jsx)(r.p,{children:"A variable is a holder for a representation of a value."}),"\n",(0,t.jsx)(r.p,{children:"Value is the smallest piece of information that is stored in memory. There are two types of values in JS. They are either objects or primitive values"}),"\n",(0,t.jsx)(r.h2,{id:"data-types-of-javascript",children:"Data types of JavaScript"}),"\n",(0,t.jsxs)(r.p,{children:["There are ",(0,t.jsx)(r.strong,{children:"7"})," primitve data types in JavaScript.They are:"]}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Number"}),": Floating point numbers. Used for decimals and integers"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"String"}),": Sequence of characters. Used for text. Can be wrapped in ",(0,t.jsx)(r.code,{children:"' '"})," or ",(0,t.jsx)(r.code,{children:' " "'})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Boolean"}),": Logical type that can only be ",(0,t.jsx)(r.code,{children:"true"})," or ",(0,t.jsx)(r.code,{children:"false"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Undefined"}),": Value of a variable that is not defined. eg: ",(0,t.jsx)(r.code,{children:"let steve;"})," this will hold undefined"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Null"})," : Empty value"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"BigInt"}),": Large numbers that cannot be held by Number"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Symbol"}),": Immutable and unique"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"variable-declaration",children:"Variable Declaration"}),"\n",(0,t.jsx)(r.p,{children:"There are 3 types of variable declaration in Javascript."}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"var: allows mutating. Avoid using"}),"\n",(0,t.jsx)(r.li,{children:"let: allows mutating."}),"\n",(0,t.jsxs)(r.li,{children:["const: use when the value is to not be mutated.","\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Initial value is required."}),"\n",(0,t.jsx)(r.li,{children:"Good practice to use this as first option."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"If there is no keyword before declaring a variable then the variable will be declared in the global scope."}),"\n",(0,t.jsx)(r.p,{children:"Code Snippets for the same"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"let name;\r\n// will return undefined\r\nlet age = 22;\r\n// used let as age changes\r\nconst birthYear = 2001;\r\n// used const as birthYear doesnt change\r\n\r\n// Global declaration\r\nopenSource = 'This project is open source';\r\nconsole.log(openSource); //output => This project is open source\n"})}),"\n",(0,t.jsx)(r.h2,{id:"operators",children:"Operators"}),"\n",(0,t.jsx)(r.p,{children:"There are many categories of operators:"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.strong,{children:"Arithmetic Operators"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.strong,{children:"Assignment Operators"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.strong,{children:"Comparison Operators"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.strong,{children:"Logical Operators"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.strong,{children:"Conditional Operators"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.strong,{children:"Type Operators"})}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["Their precendence can be found on the table present in ",(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#table",children:"Mozilla Developer Network (MDN)"})]}),"\n",(0,t.jsx)(r.h3,{id:"arithmetic-operators",children:"Arithmetic Operators"}),"\n",(0,t.jsx)(r.p,{children:"These operators are used for arthimetic (mathematic) operations."}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Operator"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"+"}),(0,t.jsx)(r.td,{children:"Addition"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"-"}),(0,t.jsx)(r.td,{children:"Subtaction"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"*"}),(0,t.jsx)(r.td,{children:"Multiplication"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"**"}),(0,t.jsx)(r.td,{children:"Exponent (Raised to the power)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"/"}),(0,t.jsx)(r.td,{children:"Division"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"%"}),(0,t.jsx)(r.td,{children:"Modulo (Division Remainder)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"++"}),(0,t.jsx)(r.td,{children:"Increment"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"--"}),(0,t.jsx)(r.td,{children:"Decrement"})]})]})]}),"\n",(0,t.jsx)(r.h3,{id:"assignment-operators",children:"Assignment Operators"}),"\n",(0,t.jsx)(r.p,{children:"These operators are used to assign a values. They follow right hand assignment i.e the value on the right is assigned to the left. Below are short hands of it as well"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Operator"}),(0,t.jsx)(r.th,{children:"Example"}),(0,t.jsx)(r.th,{children:"Same as"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"="}),(0,t.jsx)(r.td,{children:"x = y"}),(0,t.jsx)(r.td,{children:"x = y"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"+="}),(0,t.jsx)(r.td,{children:"x += y"}),(0,t.jsx)(r.td,{children:"x = x + y"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"-="}),(0,t.jsx)(r.td,{children:"x -= y"}),(0,t.jsx)(r.td,{children:"x = x - y"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"*="}),(0,t.jsx)(r.td,{children:"x *= y"}),(0,t.jsx)(r.td,{children:"x = x *y"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"/="}),(0,t.jsx)(r.td,{children:"x /= y"}),(0,t.jsx)(r.td,{children:"x= x/y"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"%="}),(0,t.jsx)(r.td,{children:"x%y"}),(0,t.jsx)(r.td,{children:"x= x%y"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"**="}),(0,t.jsx)(r.td,{children:"x **=y"}),(0,t.jsx)(r.td,{children:"x= x ** y"})]})]})]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"+"})," can also be used to concatenate strings"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"let text = 'What a wonderful ';\r\ntext += 'day it is';\r\n\r\nconsole.log(text); // output => What a wonderful day it is\n"})}),"\n",(0,t.jsx)(r.h3,{id:"comparison-operators",children:"Comparison Operators"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Operator"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"=="}),(0,t.jsx)(r.td,{children:"Equal to"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"==="}),(0,t.jsx)(r.td,{children:"Equal value and Equal type"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"!="}),(0,t.jsx)(r.td,{children:"Not equal"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"!=="}),(0,t.jsx)(r.td,{children:"Not Equal value or not equal type"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:">"}),(0,t.jsx)(r.td,{children:"Greater than"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"<"}),(0,t.jsx)(r.td,{children:"Less than"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:">="}),(0,t.jsx)(r.td,{children:"Greater than or equal to"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"<="}),(0,t.jsx)(r.td,{children:"Less than or equal to"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"?"}),(0,t.jsx)(r.td,{children:"Ternary operator (checks boolean)"})]})]})]}),"\n",(0,t.jsx)(r.h3,{id:"logical-operators",children:"Logical Operators"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Operator"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"&&"}),(0,t.jsx)(r.td,{children:"logical AND"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"||"}),(0,t.jsx)(r.td,{children:"logical OR"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"!"}),(0,t.jsx)(r.td,{children:"logical NOT"})]})]})]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"They can be use any data type, return any data type."}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Often used for short-circuiting."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",metastring:'title="Short-circuiting for || (OR)"',children:"console.log(3 || 'Steve'); // output =>3\r\nconsole.log('' || 'Steve'); //output => Steve\r\n// Evaluates the first expression and returns it if true and ignores the second expression.\r\n//Else returns second.\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",metastring:'title="Short-circuiting for && (AND)"',children:"console.log(0 && 'Steve'); //output =>0\r\nconsole.log(7 && 'Steve'); //output => Steve\r\n// Evaluates till first false value is found.\r\n// Else continues till expression is true.\n"})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:["The OR operator returns false when compared with 0 or ",(0,t.jsx)(r.code,{children:"' '"}),"."]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"The Nullish Coalesing Operator overcomes this pitfall."}),"\n",(0,t.jsx)(r.li,{children:"It treats only null and undefined as false."}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"const restaurantGuests = 0;\r\nconst guests = restaurantGuests ?? 10;\r\nconsole.log(guests); // output=>0\n"})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Logical operators can be combined with assignment operators as well to assign values."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"type-operators",children:"Type Operators"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Operator"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"typeof"}),(0,t.jsx)(r.td,{children:"Returns the type of variable"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"instanceof"}),(0,t.jsx)(r.td,{children:"Returns true if an object is an instance of object type"})]})]})]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>l,x:()=>d});var n=s(6540);const t={},i=n.createContext(t);function l(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);