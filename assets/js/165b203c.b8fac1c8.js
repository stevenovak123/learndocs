"use strict";(self.webpackChunkmy_learnings=self.webpackChunkmy_learnings||[]).push([[627],{8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>d});var n=r(6540);const i={},s=n.createContext(i);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(s.Provider,{value:t},e.children)}},8952:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>o,frontMatter:()=>a,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"DSA/Graphs","title":"Graphs","description":"Details about Graphs.","source":"@site/docs/DSA/Graphs.md","sourceDirName":"DSA","slug":"/DSA/Graphs","permalink":"/learndocs/DSA/Graphs","draft":false,"unlisted":false,"editUrl":"https://github.com/stevenovak123/learndocs/tree/master/docs/DSA/Graphs.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7,"title":"Graphs","description":"Details about Graphs."},"sidebar":"tutorialSidebar","previous":{"title":"Hash Tables/ Maps","permalink":"/learndocs/DSA/HashTable"},"next":{"title":"Solved problems","permalink":"/learndocs/DSA/SolvedProblems"}}');var i=r(4848),s=r(8453);const a={sidebar_position:7,title:"Graphs",description:"Details about Graphs."},d=void 0,c={},h=[{value:"Adjacency matrix",id:"adjacency-matrix",level:2},{value:"Adjacency List",id:"adjacency-list",level:2},{value:"Time Complexity between Adjacency List and Adjacency Matrix",id:"time-complexity-between-adjacency-list-and-adjacency-matrix",level:2},{value:"Graph Traversal",id:"graph-traversal",level:2},{value:"Pseudocode Depth First Traversal",id:"pseudocode-depth-first-traversal",level:3},{value:"Pseudocode Breadth First Traversal",id:"pseudocode-breadth-first-traversal",level:3},{value:"Implementation",id:"implementation",level:2}];function l(e){const t={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Graph is a data structure that is a collection of nodes and its connections."}),"\n",(0,i.jsx)(t.p,{children:"It consists of vertex - a node, edge - connections between them."}),"\n",(0,i.jsx)(t.p,{children:"Graphs are used in social networks, locations, routing algorithms, file system optimization etc."}),"\n",(0,i.jsx)(t.p,{children:"There are types of graphs."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Undirected graph : An undirected graph is a graph where edges do not have a specific direction, meaning connections go both ways."}),"\n",(0,i.jsx)(t.li,{children:"Directed graph: A graph in which edges have a direction, i.e., the edges have arrows indicating the direction of traversal."}),"\n",(0,i.jsx)(t.li,{children:"Weighted graph: Has units on the edges. Often used with algorithms to know shortest path."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"adjacency-matrix",children:"Adjacency matrix"}),"\n",(0,i.jsxs)(t.p,{children:["An adjacency matrix is a 2D matrix ",(0,i.jsx)(t.code,{children:"A"})," of size ",(0,i.jsx)(t.code,{children:"n \xd7 n"}),", where n is the number of vertices in the graph. The elements of the matrix indicate whether pairs of vertices are adjacent or not in the graph."]}),"\n",(0,i.jsx)(t.h2,{id:"adjacency-list",children:"Adjacency List"}),"\n",(0,i.jsx)(t.p,{children:"An adjacency list is a common way to represent graphs. In this structure:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Each vertex stores a list of adjacent vertices."}),"\n",(0,i.jsx)(t.li,{children:"It's typically implemented using an array (or dictionary) of lists."}),"\n",(0,i.jsx)(t.li,{children:"It is very efficient for sparse graphs, where the number of edges is much less than the square of the number of vertices."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"time-complexity-between-adjacency-list-and-adjacency-matrix",children:"Time Complexity between Adjacency List and Adjacency Matrix"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Feature"}),(0,i.jsx)(t.th,{children:"Adjacency List"}),(0,i.jsx)(t.th,{children:"Adjacency Matrix"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Add Vertex"})}),(0,i.jsx)(t.td,{children:"O(1)"}),(0,i.jsxs)(t.td,{children:["O(V",(0,i.jsx)("sup",{children:"2"}),")"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Add an Edge"})}),(0,i.jsx)(t.td,{children:"O(1)"}),(0,i.jsx)(t.td,{children:"O(1)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Remove Vertex"})}),(0,i.jsx)(t.td,{children:"O(V + E)"}),(0,i.jsxs)(t.td,{children:["O(V",(0,i.jsx)("sup",{children:"2"}),")"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Remove an Edge"})}),(0,i.jsx)(t.td,{children:"O(E)"}),(0,i.jsx)(t.td,{children:"O(1)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Edge Lookup Time"})}),(0,i.jsx)(t.td,{children:"O(V + E)"}),(0,i.jsx)(t.td,{children:"O(1)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Storage"})}),(0,i.jsx)(t.td,{children:"O(V + E)"}),(0,i.jsxs)(t.td,{children:["O(V",(0,i.jsx)("sup",{children:"2"}),")"]})]})]})]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"V is the number of vertices and E is the Edges of the graph"})}),"\n",(0,i.jsx)(t.h2,{id:"graph-traversal",children:"Graph Traversal"}),"\n",(0,i.jsxs)(t.p,{children:["Graph traversal is the process of visiting all the nodes (or vertices) in a graph, typically to search or explore the structure. The two main types of graph traversal are ",(0,i.jsx)(t.strong,{children:"Depth-First Search (DFS) and Breadth-First Search (BFS)."})]}),"\n",(0,i.jsx)(t.p,{children:"In DFS, you start from a node and explore as far as possible along each branch before backtracking.\r\nIn BFS, you explore all the neighbors of a node before moving on to their neighbors."}),"\n",(0,i.jsx)(t.h3,{id:"pseudocode-depth-first-traversal",children:"Pseudocode Depth First Traversal"}),"\n",(0,i.jsx)(t.p,{children:"There is a recursive and an iterative solution. both will give a different order."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The function should take a starting node."}),"\n",(0,i.jsx)(t.li,{children:"Create a list to store the end result."}),"\n",(0,i.jsx)(t.li,{children:"Create an object to store visited vertices."}),"\n",(0,i.jsxs)(t.li,{children:["Create a helper function which accepts a vertex","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"This helper function should return early if the vertex is empty."}),"\n",(0,i.jsx)(t.li,{children:"The helper function should place the vertex it accepts into the visited object and push that vertex into the result array."}),"\n",(0,i.jsx)(t.li,{children:"Loop over all of the values in the adjacency list for that vertex."}),"\n",(0,i.jsx)(t.li,{children:"If any of those values are not listed/visited, recursively invoke the helper function with that vertex."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"pseudocode-breadth-first-traversal",children:"Pseudocode Breadth First Traversal"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The function should take a starting node."}),"\n",(0,i.jsx)(t.li,{children:"Create a queue and place the starting vertex in it."}),"\n",(0,i.jsx)(t.li,{children:"Create an array to store the nodes visited."}),"\n",(0,i.jsx)(t.li,{children:"Create an object to store visited vertices."}),"\n",(0,i.jsx)(t.li,{children:"Mark the starting vertex as visited."}),"\n",(0,i.jsx)(t.li,{children:"Loop as long as there is anything in the queue."}),"\n",(0,i.jsx)(t.li,{children:"Remove the first vertex from the queue and push it into the array that stores the nodes visited."}),"\n",(0,i.jsx)(t.li,{children:"Loop over each vertex in the adjacency list for the vertex you are visiting."}),"\n",(0,i.jsx)(t.li,{children:"If it is not inside the object that stores nodes visited, mark it as visited and enqueue that vertex."}),"\n",(0,i.jsx)(t.li,{children:"Return the array of visited nodes."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(t.p,{children:"Below implementation with undirected graphs."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:"title='Graph implementation'",children:"// * Undirected\r\n// * not doing error handling\r\nclass Graph {\r\n  constructor() {\r\n    this.adjacencyList = {};\r\n  }\r\n  addVertex(vertex) {\r\n    if (!this.adjacencyList[vertex]) this.adjacencyList[vertex] = [];\r\n  }\r\n  addEdge(vertex1, vertex2) {\r\n    this.adjacencyList[vertex1].push(vertex2);\r\n    this.adjacencyList[vertex2].push(vertex1);\r\n  }\r\n  removeEdge(vertex1, vertex2) {\r\n    this.adjacencyList[vertex1] = this.adjacencyList[vertex1].filter(\r\n      (v) => v !== vertex2\r\n    );\r\n    this.adjacencyList[vertex2] = this.adjacencyList[vertex2].filter(\r\n      (v) => v !== vertex1\r\n    );\r\n  }\r\n  removeVertex(vertex) {\r\n    while (this.adjacencyList[vertex].length) {\r\n      const adjacentVertex = this.adjacencyList[vertex].pop();\r\n      this.removeEdge(vertex, adjacentVertex);\r\n    }\r\n    delete this.adjacencyList[vertex];\r\n  }\r\n  // recursive\r\n  depthFirstTraversal(start) {\r\n    const result = [];\r\n    const visited = {};\r\n    const adjacencyList = this.adjacencyList;\r\n    //IIFE. Can do without IIFE as well\r\n    (function dfs(vertex) {\r\n      if (!vertex) return null;\r\n      visited[vertex] = true;\r\n      result.push(vertex);\r\n      adjacencyList[vertex].forEach((neighbor) => {\r\n        if (!visited[neighbor]) {\r\n          return dfs(neighbor);\r\n        }\r\n      });\r\n    })(start);\r\n    return result;\r\n  }\r\n  // Iterative.\r\n  dfsIterative(start) {\r\n    let stack = [start];\r\n    let visited = {};\r\n    let currentVertex;\r\n    let result = [];\r\n    visited[start] = true;\r\n    while (stack.length) {\r\n      currentVertex = stack.pop();\r\n      result.push(currentVertex);\r\n      this.adjacencyList[currentVertex].forEach((neighbor) => {\r\n        if (!visited[neighbor]) {\r\n          visited[neighbor] = true;\r\n          stack.push(neighbor);\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n  breadthFirst(start) {\r\n    const queue = [start];\r\n    const result = [];\r\n    const visited = {};\r\n    let currentVertex;\r\n    visited[start] = true;\r\n\r\n    while (queue.length) {\r\n      currentVertex = queue.shift();\r\n      result.push(currentVertex);\r\n      this.adjacencyList(currentVertex).forEach((neighbor) => {\r\n        if (!visited[neighbor]) {\r\n          visited[neighbor] = true;\r\n          queue.push(neighbor);\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n}\n"})})]})}function o(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);