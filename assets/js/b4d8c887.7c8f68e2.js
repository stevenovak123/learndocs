"use strict";(self.webpackChunkmy_learnings=self.webpackChunkmy_learnings||[]).push([[555],{5230:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"DSA/Sorting/Bubble","title":"Bubble Sort","description":"Bubble Sort Logic and Code.","source":"@site/docs/DSA/Sorting/Bubble.md","sourceDirName":"DSA/Sorting","slug":"/DSA/Sorting/Bubble","permalink":"/learndocs/DSA/Sorting/Bubble","draft":false,"unlisted":false,"editUrl":"https://github.com/stevenovak123/learndocs/tree/master/docs/DSA/Sorting/Bubble.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Bubble Sort","description":"Bubble Sort Logic and Code."},"sidebar":"tutorialSidebar","previous":{"title":"Built In JavaScript Sorting","permalink":"/learndocs/DSA/Sorting/BuiltIn"},"next":{"title":"Selection Sort","permalink":"/learndocs/DSA/Sorting/Selection"}}');var i=n(4848),s=n(8453);const o={sidebar_position:2,title:"Bubble Sort",description:"Bubble Sort Logic and Code."},a=void 0,l={},c=[{value:"Pseudocode.",id:"pseudocode",level:2},{value:"Time Complexity.",id:"time-complexity",level:2}];function d(e){const r={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.p,{children:"It is a sorting algorithm where the largest values bubble up to the top."}),"\n",(0,i.jsx)(r.h2,{id:"pseudocode",children:"Pseudocode."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Create a variable noSwap to check if any swaps are made during the pass."}),"\n",(0,i.jsx)(r.li,{children:"Start a loop with a variable i from the end of the array towards the beginning (i.e., starting from the last element)."}),"\n",(0,i.jsxs)(r.li,{children:["Set ",(0,i.jsx)(r.code,{children:"noSwap = true"})," before each pass. This flag helps determine if any swaps are made during that pass."]}),"\n",(0,i.jsxs)(r.li,{children:["Start an inner loop with a variable j from the beginning of the array to ",(0,i.jsx)(r.code,{children:"i-1"}),".\r\n-This loop compares adjacent elements and performs swaps if necessary."]}),"\n",(0,i.jsxs)(r.li,{children:["if ",(0,i.jsx)(r.code,{children:"arr[j] is greater than arr[j + 1]"}),", swap their positions and set ",(0,i.jsx)(r.code,{children:"noSwap = false"}),"."]}),"\n",(0,i.jsx)(r.li,{children:"If no swaps were made (i.e., noSwap remains true), exit the loop early because the array is already sorted."}),"\n",(0,i.jsx)(r.li,{children:"Return the sorted array once all passes are done or the loop exits early."}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"time-complexity",children:"Time Complexity."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Best Case is O(N)."}),"\n",(0,i.jsxs)(r.li,{children:["Average Case and Worst Case is O(n",(0,i.jsx)("sup",{children:"2"}),"), where n is the size of the array"]}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-javascript",metastring:"title='Bubble Sort'",children:"function bubbleSort(arr) {\r\n  let noSwaps;\r\n  for (let i = arr.length; i > 0; i--) {\r\n    noSwaps = true;\r\n    for (let j = 0; j < i - 1; j++) {\r\n      if (arr[j] > arr[j + 1]) {\r\n        let temp = arr[j];\r\n        arr[j] = arr[j + 1];\r\n        arr[j + 1] = temp;\r\n        noSwaps = false;\r\n      }\r\n    }\r\n    if (noSwaps) break;\r\n  }\r\n  return arr;\r\n}\r\n\n"})})]})}function p(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>a});var t=n(6540);const i={},s=t.createContext(i);function o(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);